*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "Roboto", sans-serif;
}

.container {
    width: 80%;
    background-color: #d6d6d6;
    border: 1px solid #000;
    margin: 20px auto;
    /* Convertendo o container em um elemento pai, contolando o posicionamento dos filhos, utilizando o display: flex */
    display: flex;
    /* Determinando o eixo da dos filhos, se é em coluna ou linha */
    /* Pode ser utilizado flex-direction:  */
    /* row (linha)/row-reverse (linha invertendo a ordem) */
    /* column (coluna)/column-revers (coluna invertendo a ordem) */
    flex-direction: row;
    /* flex-wrap é utilizado a para quebrar ou não a linha/coluna dos elementos, pode ser utilizado:
    no-wrap para não quebrar, wrap para quebrar a linha e o wrap reverse para iverter o posicionamneto */
    flex-wrap: wrap;
    /* Propeiredade justify-content é utilizada para o posicionar os itens filhos, só pode ser utilizada se for inserida a propriedade display: flex e posicionara de acordo com o eixo escolhido na propriedade flex-direction */
    /* justify-content: flex start: alinha os itens no inicio do elemnto pai/ flex-end: alinha os itens no final do elemento pai/ center: centraliza os itens no elemneto pai/ space-between: faz o posicionamento pelas extremidades do elemento pai, deixando um espaçamento praticamnete igual / space-around: faz o posicionamento pelo centro do elemento pai, deixando os espaçamentos maiores que os espaçamentos entre as extremidade /space-evenly: deixa o espaçamento igual entre o centro e as laterais dos elemento pai*/
    justify-content: center;
    /* Pode também ser utilizado para posicionamneto a propriedade (align-items), funcionando igual justify-content porém verticalmente */
    align-items:center;  
    /* atenção para a função stret: onde todos os elementos filhos ocupam a mesma latura que o elemento pai e a fubção baseline: para deixar todos os elementos filhos alinhados independente do conteudo */
}
.box {width: 200px;
height: 20px;
background-color: #6ce028;
border:1px solid #000;
margin: 10px;}

.base{width: 80%;
    background-color: #d6d6d6;
    height: 200px;
    border: 1px solid #000;
    margin: 20px auto;
    display: flex;
    }
/* flex-grow é utilizado para definir a largura dos container e só pode ser aplicados aos filhos, ocupando o valor maximo definido pelo container pai. */
/* flex-basis funcionara da mesma forma defindo um valor para o container filho, podendo chagar até o valor maximo delimitado pelo container pai*/
/* order: utilizado para ordenar, aplicado aos containers filhos  */
/* gap deve ser utlizado no container pai, definindo o espaçamento dos contaienrs filhos */
.box1{flex-grow: 1;
    border: 2px solid #000;
background-color: #6ce028;
order: 1}
.box2{flex-grow: 2;
border: 2px solid #000;
background-color: #e08a28;
order: 3;}
.box3{flex-grow: 10; border: 2px solid #000;
background-color: #2896e0;
order: 2;}

.pai{width: 60%;
height: 200px;
border:  2px solid #000;
margin: 20px auto;}

/* A propriedade position permite mover o elemento (top,down,left e right) de acordo com a função utilizada. A função realtive ira permitir mover o elemento de acordo com o container pai e a função absolute ira possitar mover o elemento de acordo com o body da pagina.
 Relative absolute pode ser utilizado no container pai, colocando o posicionamneto no container filho */
.filho{width: 20%;
height: 50%;
background-color: #2896e0;
border: 2px solid #000;
position: relative;
left: 200px;
top: 100px;}

/* A propriedade fixed serve para fixar o elento, ao colocar a propriedade deve ser colocado a posição (top,down,left e right) e inserir a propriedade z-index 1 para a propriedade fixar a frente de otras na visualização  da tela. */
h1{width: 100%;
height: 50px;
background-color: #ec1212;
text-align: center;
padding: auto;
position: fixed;
top: 0;
left: 0;
z-index: 1;
}

